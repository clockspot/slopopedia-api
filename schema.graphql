# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Fest {
  id: ID!
  name: String
  startDate: CalendarDay
  endDate: CalendarDay
  creator: User
  attendees(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  attendeesCount(where: UserWhereInput! = {}): Int
  invitees(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  inviteesCount(where: UserWhereInput! = {}): Int
  movies(where: MovieWhereInput! = {}, orderBy: [MovieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MovieWhereUniqueInput): [Movie!]
  moviesCount(where: MovieWhereInput! = {}): Int
  festVotes(where: FestVoteWhereInput! = {}, orderBy: [FestVoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FestVoteWhereUniqueInput): [FestVote!]
  festVotesCount(where: FestVoteWhereInput! = {}): Int
  festNotes(where: FestNoteWhereInput! = {}, orderBy: [FestNoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FestNoteWhereUniqueInput): [FestNote!]
  festNotesCount(where: FestNoteWhereInput! = {}): Int
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input FestWhereUniqueInput {
  id: ID
}

input FestWhereInput {
  AND: [FestWhereInput!]
  OR: [FestWhereInput!]
  NOT: [FestWhereInput!]
  id: IDFilter
  name: StringFilter
  startDate: CalendarDayFilter
  endDate: CalendarDayFilter
  creator: UserWhereInput
  attendees: UserManyRelationFilter
  invitees: UserManyRelationFilter
  movies: MovieManyRelationFilter
  festVotes: FestVoteManyRelationFilter
  festNotes: FestNoteManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input MovieManyRelationFilter {
  every: MovieWhereInput
  some: MovieWhereInput
  none: MovieWhereInput
}

input FestVoteManyRelationFilter {
  every: FestVoteWhereInput
  some: FestVoteWhereInput
  none: FestVoteWhereInput
}

input FestNoteManyRelationFilter {
  every: FestNoteWhereInput
  some: FestNoteWhereInput
  none: FestNoteWhereInput
}

input FestOrderByInput {
  id: OrderDirection
  name: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input FestUpdateInput {
  name: String
  startDate: CalendarDay
  endDate: CalendarDay
  creator: UserRelateToOneForUpdateInput
  attendees: UserRelateToManyForUpdateInput
  invitees: UserRelateToManyForUpdateInput
  movies: MovieRelateToManyForUpdateInput
  festVotes: FestVoteRelateToManyForUpdateInput
  festNotes: FestNoteRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input MovieRelateToManyForUpdateInput {
  disconnect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  create: [MovieCreateInput!]
  connect: [MovieWhereUniqueInput!]
}

input FestVoteRelateToManyForUpdateInput {
  disconnect: [FestVoteWhereUniqueInput!]
  set: [FestVoteWhereUniqueInput!]
  create: [FestVoteCreateInput!]
  connect: [FestVoteWhereUniqueInput!]
}

input FestNoteRelateToManyForUpdateInput {
  disconnect: [FestNoteWhereUniqueInput!]
  set: [FestNoteWhereUniqueInput!]
  create: [FestNoteCreateInput!]
  connect: [FestNoteWhereUniqueInput!]
}

input FestUpdateArgs {
  where: FestWhereUniqueInput!
  data: FestUpdateInput!
}

input FestCreateInput {
  name: String
  startDate: CalendarDay
  endDate: CalendarDay
  creator: UserRelateToOneForCreateInput
  attendees: UserRelateToManyForCreateInput
  invitees: UserRelateToManyForCreateInput
  movies: MovieRelateToManyForCreateInput
  festVotes: FestVoteRelateToManyForCreateInput
  festNotes: FestNoteRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input MovieRelateToManyForCreateInput {
  create: [MovieCreateInput!]
  connect: [MovieWhereUniqueInput!]
}

input FestVoteRelateToManyForCreateInput {
  create: [FestVoteCreateInput!]
  connect: [FestVoteWhereUniqueInput!]
}

input FestNoteRelateToManyForCreateInput {
  create: [FestNoteCreateInput!]
  connect: [FestNoteWhereUniqueInput!]
}

type FestNote {
  id: ID!
  content: String
  user: User
  fest: Fest
  createdAt: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input FestNoteWhereUniqueInput {
  id: ID
}

input FestNoteWhereInput {
  AND: [FestNoteWhereInput!]
  OR: [FestNoteWhereInput!]
  NOT: [FestNoteWhereInput!]
  id: IDFilter
  content: StringFilter
  user: UserWhereInput
  fest: FestWhereInput
  createdAt: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input FestNoteOrderByInput {
  id: OrderDirection
  content: OrderDirection
  createdAt: OrderDirection
}

input FestNoteUpdateInput {
  content: String
  user: UserRelateToOneForUpdateInput
  fest: FestRelateToOneForUpdateInput
  createdAt: DateTime
}

input FestRelateToOneForUpdateInput {
  create: FestCreateInput
  connect: FestWhereUniqueInput
  disconnect: Boolean
}

input FestNoteUpdateArgs {
  where: FestNoteWhereUniqueInput!
  data: FestNoteUpdateInput!
}

input FestNoteCreateInput {
  content: String
  user: UserRelateToOneForCreateInput
  fest: FestRelateToOneForCreateInput
  createdAt: DateTime
}

input FestRelateToOneForCreateInput {
  create: FestCreateInput
  connect: FestWhereUniqueInput
}

type FestVote {
  id: ID!
  user: User
  movie(where: MovieWhereInput! = {}, orderBy: [MovieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MovieWhereUniqueInput): [Movie!]
  movieCount(where: MovieWhereInput! = {}): Int
  fest: Fest
}

input FestVoteWhereUniqueInput {
  id: ID
}

input FestVoteWhereInput {
  AND: [FestVoteWhereInput!]
  OR: [FestVoteWhereInput!]
  NOT: [FestVoteWhereInput!]
  id: IDFilter
  user: UserWhereInput
  movie: MovieManyRelationFilter
  fest: FestWhereInput
}

input FestVoteOrderByInput {
  id: OrderDirection
}

input FestVoteUpdateInput {
  user: UserRelateToOneForUpdateInput
  movie: MovieRelateToManyForUpdateInput
  fest: FestRelateToOneForUpdateInput
}

input FestVoteUpdateArgs {
  where: FestVoteWhereUniqueInput!
  data: FestVoteUpdateInput!
}

input FestVoteCreateInput {
  user: UserRelateToOneForCreateInput
  movie: MovieRelateToManyForCreateInput
  fest: FestRelateToOneForCreateInput
}

type Keyword {
  id: ID!
  name: String
  handicap: Int
  keywordType: KeywordType
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  movies(where: MovieWhereInput! = {}, orderBy: [MovieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MovieWhereUniqueInput): [Movie!]
  moviesCount(where: MovieWhereInput! = {}): Int
}

input KeywordWhereUniqueInput {
  id: ID
  name: String
}

input KeywordWhereInput {
  AND: [KeywordWhereInput!]
  OR: [KeywordWhereInput!]
  NOT: [KeywordWhereInput!]
  id: IDFilter
  name: StringFilter
  handicap: IntNullableFilter
  keywordType: KeywordTypeWhereInput
  posts: PostManyRelationFilter
  movies: MovieManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input KeywordOrderByInput {
  id: OrderDirection
  name: OrderDirection
  handicap: OrderDirection
}

input KeywordUpdateInput {
  name: String
  handicap: Int
  keywordType: KeywordTypeRelateToOneForUpdateInput
  posts: PostRelateToManyForUpdateInput
  movies: MovieRelateToManyForUpdateInput
}

input KeywordTypeRelateToOneForUpdateInput {
  create: KeywordTypeCreateInput
  connect: KeywordTypeWhereUniqueInput
  disconnect: Boolean
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input KeywordUpdateArgs {
  where: KeywordWhereUniqueInput!
  data: KeywordUpdateInput!
}

input KeywordCreateInput {
  name: String
  handicap: Int
  keywordType: KeywordTypeRelateToOneForCreateInput
  posts: PostRelateToManyForCreateInput
  movies: MovieRelateToManyForCreateInput
}

input KeywordTypeRelateToOneForCreateInput {
  create: KeywordTypeCreateInput
  connect: KeywordTypeWhereUniqueInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type KeywordType {
  id: ID!
  name: String
  keywords(where: KeywordWhereInput! = {}, orderBy: [KeywordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: KeywordWhereUniqueInput): [Keyword!]
  keywordsCount(where: KeywordWhereInput! = {}): Int
}

input KeywordTypeWhereUniqueInput {
  id: ID
  name: String
}

input KeywordTypeWhereInput {
  AND: [KeywordTypeWhereInput!]
  OR: [KeywordTypeWhereInput!]
  NOT: [KeywordTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  keywords: KeywordManyRelationFilter
}

input KeywordManyRelationFilter {
  every: KeywordWhereInput
  some: KeywordWhereInput
  none: KeywordWhereInput
}

input KeywordTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input KeywordTypeUpdateInput {
  name: String
  keywords: KeywordRelateToManyForUpdateInput
}

input KeywordRelateToManyForUpdateInput {
  disconnect: [KeywordWhereUniqueInput!]
  set: [KeywordWhereUniqueInput!]
  create: [KeywordCreateInput!]
  connect: [KeywordWhereUniqueInput!]
}

input KeywordTypeUpdateArgs {
  where: KeywordTypeWhereUniqueInput!
  data: KeywordTypeUpdateInput!
}

input KeywordTypeCreateInput {
  name: String
  keywords: KeywordRelateToManyForCreateInput
}

input KeywordRelateToManyForCreateInput {
  create: [KeywordCreateInput!]
  connect: [KeywordWhereUniqueInput!]
}

type Movie {
  id: ID!
  author: User
  title: String
  description: String
  releaseYear: Int
  runtime: Int
  photo: ImageFieldOutput
  tomatoScore: Int
  howToWatch: String
  handicap: Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  sounds(where: SoundWhereInput! = {}, orderBy: [SoundOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SoundWhereUniqueInput): [Sound!]
  soundsCount(where: SoundWhereInput! = {}): Int
  keywords(where: KeywordWhereInput! = {}, orderBy: [KeywordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: KeywordWhereUniqueInput): [Keyword!]
  keywordsCount(where: KeywordWhereInput! = {}): Int
  status: String
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input MovieWhereUniqueInput {
  id: ID
}

input MovieWhereInput {
  AND: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  NOT: [MovieWhereInput!]
  id: IDFilter
  author: UserWhereInput
  title: StringFilter
  description: StringFilter
  releaseYear: IntNullableFilter
  runtime: IntNullableFilter
  tomatoScore: IntNullableFilter
  howToWatch: StringFilter
  handicap: IntNullableFilter
  posts: PostManyRelationFilter
  sounds: SoundManyRelationFilter
  keywords: KeywordManyRelationFilter
  status: StringNullableFilter
}

input SoundManyRelationFilter {
  every: SoundWhereInput
  some: SoundWhereInput
  none: SoundWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input MovieOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  releaseYear: OrderDirection
  runtime: OrderDirection
  tomatoScore: OrderDirection
  howToWatch: OrderDirection
  handicap: OrderDirection
  status: OrderDirection
}

input MovieUpdateInput {
  author: UserRelateToOneForUpdateInput
  title: String
  description: String
  releaseYear: Int
  runtime: Int
  photo: ImageFieldInput
  tomatoScore: Int
  howToWatch: String
  handicap: Int
  posts: PostRelateToManyForUpdateInput
  sounds: SoundRelateToManyForUpdateInput
  keywords: KeywordRelateToManyForUpdateInput
  status: String
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input SoundRelateToManyForUpdateInput {
  disconnect: [SoundWhereUniqueInput!]
  set: [SoundWhereUniqueInput!]
  create: [SoundCreateInput!]
  connect: [SoundWhereUniqueInput!]
}

input MovieUpdateArgs {
  where: MovieWhereUniqueInput!
  data: MovieUpdateInput!
}

input MovieCreateInput {
  author: UserRelateToOneForCreateInput
  title: String
  description: String
  releaseYear: Int
  runtime: Int
  photo: ImageFieldInput
  tomatoScore: Int
  howToWatch: String
  handicap: Int
  posts: PostRelateToManyForCreateInput
  sounds: SoundRelateToManyForCreateInput
  keywords: KeywordRelateToManyForCreateInput
  status: String
}

input SoundRelateToManyForCreateInput {
  create: [SoundCreateInput!]
  connect: [SoundWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: String
  photo: ImageFieldOutput
  author: User
  createdAt: DateTime
  status: String
  keywords(where: KeywordWhereInput! = {}, orderBy: [KeywordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: KeywordWhereUniqueInput): [Keyword!]
  keywordsCount(where: KeywordWhereInput! = {}): Int
  movies(where: MovieWhereInput! = {}, orderBy: [MovieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MovieWhereUniqueInput): [Movie!]
  moviesCount(where: MovieWhereInput! = {}): Int
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
  author: UserWhereInput
  createdAt: DateTimeNullableFilter
  status: StringNullableFilter
  keywords: KeywordManyRelationFilter
  movies: MovieManyRelationFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
  createdAt: OrderDirection
  status: OrderDirection
}

input PostUpdateInput {
  title: String
  content: String
  photo: ImageFieldInput
  author: UserRelateToOneForUpdateInput
  createdAt: DateTime
  status: String
  keywords: KeywordRelateToManyForUpdateInput
  movies: MovieRelateToManyForUpdateInput
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: String
  photo: ImageFieldInput
  author: UserRelateToOneForCreateInput
  createdAt: DateTime
  status: String
  keywords: KeywordRelateToManyForCreateInput
  movies: MovieRelateToManyForCreateInput
}

type Preference {
  id: ID!
  category: Int
  name: String
  type: PreferenceTypeType
  userPreference(where: UserPreferenceWhereInput! = {}, orderBy: [UserPreferenceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserPreferenceWhereUniqueInput): [UserPreference!]
  userPreferenceCount(where: UserPreferenceWhereInput! = {}): Int
}

enum PreferenceTypeType {
  radio
  integer
}

input PreferenceWhereUniqueInput {
  id: ID
}

input PreferenceWhereInput {
  AND: [PreferenceWhereInput!]
  OR: [PreferenceWhereInput!]
  NOT: [PreferenceWhereInput!]
  id: IDFilter
  category: IntNullableFilter
  name: StringFilter
  type: PreferenceTypeTypeNullableFilter
  userPreference: UserPreferenceManyRelationFilter
}

input PreferenceTypeTypeNullableFilter {
  equals: PreferenceTypeType
  in: [PreferenceTypeType!]
  notIn: [PreferenceTypeType!]
  not: PreferenceTypeTypeNullableFilter
}

input UserPreferenceManyRelationFilter {
  every: UserPreferenceWhereInput
  some: UserPreferenceWhereInput
  none: UserPreferenceWhereInput
}

input PreferenceOrderByInput {
  id: OrderDirection
  category: OrderDirection
  name: OrderDirection
  type: OrderDirection
}

input PreferenceUpdateInput {
  category: Int
  name: String
  type: PreferenceTypeType
  userPreference: UserPreferenceRelateToManyForUpdateInput
}

input UserPreferenceRelateToManyForUpdateInput {
  disconnect: [UserPreferenceWhereUniqueInput!]
  set: [UserPreferenceWhereUniqueInput!]
  create: [UserPreferenceCreateInput!]
  connect: [UserPreferenceWhereUniqueInput!]
}

input PreferenceUpdateArgs {
  where: PreferenceWhereUniqueInput!
  data: PreferenceUpdateInput!
}

input PreferenceCreateInput {
  category: Int
  name: String
  type: PreferenceTypeType
  userPreference: UserPreferenceRelateToManyForCreateInput
}

input UserPreferenceRelateToManyForCreateInput {
  create: [UserPreferenceCreateInput!]
  connect: [UserPreferenceWhereUniqueInput!]
}

type Sound {
  id: ID!
  title: String
  photo: ImageFieldOutput
  movies(where: MovieWhereInput! = {}, orderBy: [MovieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MovieWhereUniqueInput): [Movie!]
  moviesCount(where: MovieWhereInput! = {}): Int
  audio: String
}

input SoundWhereUniqueInput {
  id: ID
  title: String
}

input SoundWhereInput {
  AND: [SoundWhereInput!]
  OR: [SoundWhereInput!]
  NOT: [SoundWhereInput!]
  id: IDFilter
  title: StringFilter
  movies: MovieManyRelationFilter
  audio: StringFilter
}

input SoundOrderByInput {
  id: OrderDirection
  title: OrderDirection
  audio: OrderDirection
}

input SoundUpdateInput {
  title: String
  photo: ImageFieldInput
  movies: MovieRelateToManyForUpdateInput
  audio: String
}

input SoundUpdateArgs {
  where: SoundWhereUniqueInput!
  data: SoundUpdateInput!
}

input SoundCreateInput {
  title: String
  photo: ImageFieldInput
  movies: MovieRelateToManyForCreateInput
  audio: String
}

type User {
  id: ID!
  username: String
  email: String
  password: PasswordState
  status: String
  isAdmin: Boolean
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  movies(where: MovieWhereInput! = {}, orderBy: [MovieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MovieWhereUniqueInput): [Movie!]
  moviesCount(where: MovieWhereInput! = {}): Int
  wishlist(where: MovieWhereInput! = {}, orderBy: [MovieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MovieWhereUniqueInput): [Movie!]
  wishlistCount(where: MovieWhereInput! = {}): Int
  watched(where: MovieWhereInput! = {}, orderBy: [MovieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MovieWhereUniqueInput): [Movie!]
  watchedCount(where: MovieWhereInput! = {}): Int
  preferences(where: UserPreferenceWhereInput! = {}, orderBy: [UserPreferenceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserPreferenceWhereUniqueInput): [UserPreference!]
  preferencesCount(where: UserPreferenceWhereInput! = {}): Int
  myFests(where: FestWhereInput! = {}, orderBy: [FestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FestWhereUniqueInput): [Fest!]
  myFestsCount(where: FestWhereInput! = {}): Int
  festAttendees(where: FestWhereInput! = {}, orderBy: [FestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FestWhereUniqueInput): [Fest!]
  festAttendeesCount(where: FestWhereInput! = {}): Int
  festInvitees(where: FestWhereInput! = {}, orderBy: [FestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FestWhereUniqueInput): [Fest!]
  festInviteesCount(where: FestWhereInput! = {}): Int
  festVotes(where: FestVoteWhereInput! = {}, orderBy: [FestVoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FestVoteWhereUniqueInput): [FestVote!]
  festVotesCount(where: FestVoteWhereInput! = {}): Int
  festNotes(where: FestNoteWhereInput! = {}, orderBy: [FestNoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FestNoteWhereUniqueInput): [FestNote!]
  festNotesCount(where: FestNoteWhereInput! = {}): Int
  createdAt: DateTime
  lastLoginDate: DateTime
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  username: StringFilter
  email: StringFilter
  status: StringNullableFilter
  isAdmin: BooleanFilter
  posts: PostManyRelationFilter
  movies: MovieManyRelationFilter
  wishlist: MovieManyRelationFilter
  watched: MovieManyRelationFilter
  preferences: UserPreferenceManyRelationFilter
  myFests: FestManyRelationFilter
  festAttendees: FestManyRelationFilter
  festInvitees: FestManyRelationFilter
  festVotes: FestVoteManyRelationFilter
  festNotes: FestNoteManyRelationFilter
  createdAt: DateTimeNullableFilter
  lastLoginDate: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input FestManyRelationFilter {
  every: FestWhereInput
  some: FestWhereInput
  none: FestWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  username: OrderDirection
  email: OrderDirection
  status: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
  lastLoginDate: OrderDirection
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  status: String
  isAdmin: Boolean
  posts: PostRelateToManyForUpdateInput
  movies: MovieRelateToManyForUpdateInput
  wishlist: MovieRelateToManyForUpdateInput
  watched: MovieRelateToManyForUpdateInput
  preferences: UserPreferenceRelateToManyForUpdateInput
  myFests: FestRelateToManyForUpdateInput
  festAttendees: FestRelateToManyForUpdateInput
  festInvitees: FestRelateToManyForUpdateInput
  festVotes: FestVoteRelateToManyForUpdateInput
  festNotes: FestNoteRelateToManyForUpdateInput
  createdAt: DateTime
  lastLoginDate: DateTime
}

input FestRelateToManyForUpdateInput {
  disconnect: [FestWhereUniqueInput!]
  set: [FestWhereUniqueInput!]
  create: [FestCreateInput!]
  connect: [FestWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  username: String
  email: String
  password: String
  status: String
  isAdmin: Boolean
  posts: PostRelateToManyForCreateInput
  movies: MovieRelateToManyForCreateInput
  wishlist: MovieRelateToManyForCreateInput
  watched: MovieRelateToManyForCreateInput
  preferences: UserPreferenceRelateToManyForCreateInput
  myFests: FestRelateToManyForCreateInput
  festAttendees: FestRelateToManyForCreateInput
  festInvitees: FestRelateToManyForCreateInput
  festVotes: FestVoteRelateToManyForCreateInput
  festNotes: FestNoteRelateToManyForCreateInput
  createdAt: DateTime
  lastLoginDate: DateTime
}

input FestRelateToManyForCreateInput {
  create: [FestCreateInput!]
  connect: [FestWhereUniqueInput!]
}

type UserPreference {
  id: ID!
  user: User
  preference: Preference
  value: Int
}

input UserPreferenceWhereUniqueInput {
  id: ID
}

input UserPreferenceWhereInput {
  AND: [UserPreferenceWhereInput!]
  OR: [UserPreferenceWhereInput!]
  NOT: [UserPreferenceWhereInput!]
  id: IDFilter
  user: UserWhereInput
  preference: PreferenceWhereInput
  value: IntFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input UserPreferenceOrderByInput {
  id: OrderDirection
  value: OrderDirection
}

input UserPreferenceUpdateInput {
  user: UserRelateToOneForUpdateInput
  preference: PreferenceRelateToOneForUpdateInput
  value: Int
}

input PreferenceRelateToOneForUpdateInput {
  create: PreferenceCreateInput
  connect: PreferenceWhereUniqueInput
  disconnect: Boolean
}

input UserPreferenceUpdateArgs {
  where: UserPreferenceWhereUniqueInput!
  data: UserPreferenceUpdateInput!
}

input UserPreferenceCreateInput {
  user: UserRelateToOneForCreateInput
  preference: PreferenceRelateToOneForCreateInput
  value: Int
}

input PreferenceRelateToOneForCreateInput {
  create: PreferenceCreateInput
  connect: PreferenceWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createFest(data: FestCreateInput!): Fest
  createFests(data: [FestCreateInput!]!): [Fest]
  updateFest(where: FestWhereUniqueInput!, data: FestUpdateInput!): Fest
  updateFests(data: [FestUpdateArgs!]!): [Fest]
  deleteFest(where: FestWhereUniqueInput!): Fest
  deleteFests(where: [FestWhereUniqueInput!]!): [Fest]
  createFestNote(data: FestNoteCreateInput!): FestNote
  createFestNotes(data: [FestNoteCreateInput!]!): [FestNote]
  updateFestNote(where: FestNoteWhereUniqueInput!, data: FestNoteUpdateInput!): FestNote
  updateFestNotes(data: [FestNoteUpdateArgs!]!): [FestNote]
  deleteFestNote(where: FestNoteWhereUniqueInput!): FestNote
  deleteFestNotes(where: [FestNoteWhereUniqueInput!]!): [FestNote]
  createFestVote(data: FestVoteCreateInput!): FestVote
  createFestVotes(data: [FestVoteCreateInput!]!): [FestVote]
  updateFestVote(where: FestVoteWhereUniqueInput!, data: FestVoteUpdateInput!): FestVote
  updateFestVotes(data: [FestVoteUpdateArgs!]!): [FestVote]
  deleteFestVote(where: FestVoteWhereUniqueInput!): FestVote
  deleteFestVotes(where: [FestVoteWhereUniqueInput!]!): [FestVote]
  createKeyword(data: KeywordCreateInput!): Keyword
  createKeywords(data: [KeywordCreateInput!]!): [Keyword]
  updateKeyword(where: KeywordWhereUniqueInput!, data: KeywordUpdateInput!): Keyword
  updateKeywords(data: [KeywordUpdateArgs!]!): [Keyword]
  deleteKeyword(where: KeywordWhereUniqueInput!): Keyword
  deleteKeywords(where: [KeywordWhereUniqueInput!]!): [Keyword]
  createKeywordType(data: KeywordTypeCreateInput!): KeywordType
  createKeywordTypes(data: [KeywordTypeCreateInput!]!): [KeywordType]
  updateKeywordType(where: KeywordTypeWhereUniqueInput!, data: KeywordTypeUpdateInput!): KeywordType
  updateKeywordTypes(data: [KeywordTypeUpdateArgs!]!): [KeywordType]
  deleteKeywordType(where: KeywordTypeWhereUniqueInput!): KeywordType
  deleteKeywordTypes(where: [KeywordTypeWhereUniqueInput!]!): [KeywordType]
  createMovie(data: MovieCreateInput!): Movie
  createMovies(data: [MovieCreateInput!]!): [Movie]
  updateMovie(where: MovieWhereUniqueInput!, data: MovieUpdateInput!): Movie
  updateMovies(data: [MovieUpdateArgs!]!): [Movie]
  deleteMovie(where: MovieWhereUniqueInput!): Movie
  deleteMovies(where: [MovieWhereUniqueInput!]!): [Movie]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createPreference(data: PreferenceCreateInput!): Preference
  createPreferences(data: [PreferenceCreateInput!]!): [Preference]
  updatePreference(where: PreferenceWhereUniqueInput!, data: PreferenceUpdateInput!): Preference
  updatePreferences(data: [PreferenceUpdateArgs!]!): [Preference]
  deletePreference(where: PreferenceWhereUniqueInput!): Preference
  deletePreferences(where: [PreferenceWhereUniqueInput!]!): [Preference]
  createSound(data: SoundCreateInput!): Sound
  createSounds(data: [SoundCreateInput!]!): [Sound]
  updateSound(where: SoundWhereUniqueInput!, data: SoundUpdateInput!): Sound
  updateSounds(data: [SoundUpdateArgs!]!): [Sound]
  deleteSound(where: SoundWhereUniqueInput!): Sound
  deleteSounds(where: [SoundWhereUniqueInput!]!): [Sound]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createUserPreference(data: UserPreferenceCreateInput!): UserPreference
  createUserPreferences(data: [UserPreferenceCreateInput!]!): [UserPreference]
  updateUserPreference(where: UserPreferenceWhereUniqueInput!, data: UserPreferenceUpdateInput!): UserPreference
  updateUserPreferences(data: [UserPreferenceUpdateArgs!]!): [UserPreference]
  deleteUserPreference(where: UserPreferenceWhereUniqueInput!): UserPreference
  deleteUserPreferences(where: [UserPreferenceWhereUniqueInput!]!): [UserPreference]
  endSession: Boolean!
  authenticateUserWithPassword(username: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  username: String
  email: String
  password: String
  isAdmin: Boolean
}

type Query {
  fests(where: FestWhereInput! = {}, orderBy: [FestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FestWhereUniqueInput): [Fest!]
  fest(where: FestWhereUniqueInput!): Fest
  festsCount(where: FestWhereInput! = {}): Int
  festNotes(where: FestNoteWhereInput! = {}, orderBy: [FestNoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FestNoteWhereUniqueInput): [FestNote!]
  festNote(where: FestNoteWhereUniqueInput!): FestNote
  festNotesCount(where: FestNoteWhereInput! = {}): Int
  festVotes(where: FestVoteWhereInput! = {}, orderBy: [FestVoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FestVoteWhereUniqueInput): [FestVote!]
  festVote(where: FestVoteWhereUniqueInput!): FestVote
  festVotesCount(where: FestVoteWhereInput! = {}): Int
  keywords(where: KeywordWhereInput! = {}, orderBy: [KeywordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: KeywordWhereUniqueInput): [Keyword!]
  keyword(where: KeywordWhereUniqueInput!): Keyword
  keywordsCount(where: KeywordWhereInput! = {}): Int
  keywordTypes(where: KeywordTypeWhereInput! = {}, orderBy: [KeywordTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: KeywordTypeWhereUniqueInput): [KeywordType!]
  keywordType(where: KeywordTypeWhereUniqueInput!): KeywordType
  keywordTypesCount(where: KeywordTypeWhereInput! = {}): Int
  movies(where: MovieWhereInput! = {}, orderBy: [MovieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MovieWhereUniqueInput): [Movie!]
  movie(where: MovieWhereUniqueInput!): Movie
  moviesCount(where: MovieWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  preferences(where: PreferenceWhereInput! = {}, orderBy: [PreferenceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PreferenceWhereUniqueInput): [Preference!]
  preference(where: PreferenceWhereUniqueInput!): Preference
  preferencesCount(where: PreferenceWhereInput! = {}): Int
  sounds(where: SoundWhereInput! = {}, orderBy: [SoundOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SoundWhereUniqueInput): [Sound!]
  sound(where: SoundWhereUniqueInput!): Sound
  soundsCount(where: SoundWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  userPreferences(where: UserPreferenceWhereInput! = {}, orderBy: [UserPreferenceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserPreferenceWhereUniqueInput): [UserPreference!]
  userPreference(where: UserPreferenceWhereUniqueInput!): UserPreference
  userPreferencesCount(where: UserPreferenceWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
