# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: UserRoleType
  status: String
  isPrivileged: Boolean
  slopRating: Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  movies(where: MovieWhereInput! = {}, orderBy: [MovieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MovieWhereUniqueInput): [Movie!]
  moviesCount(where: MovieWhereInput! = {}): Int
  wishlist(where: MovieWhereInput! = {}, orderBy: [MovieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MovieWhereUniqueInput): [Movie!]
  wishlistCount(where: MovieWhereInput! = {}): Int
  watched(where: MovieWhereInput! = {}, orderBy: [MovieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MovieWhereUniqueInput): [Movie!]
  watchedCount(where: MovieWhereInput! = {}): Int
  preferences(where: UserPreferenceWhereInput! = {}, orderBy: [UserPreferenceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserPreferenceWhereUniqueInput): [UserPreference!]
  preferencesCount(where: UserPreferenceWhereInput! = {}): Int
  createdAt: DateTime
  lastLoginDate: DateTime
}

type PasswordState {
  isSet: Boolean!
}

enum UserRoleType {
  admin
  user
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  name: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: UserRoleTypeNullableFilter
  status: StringNullableFilter
  isPrivileged: BooleanFilter
  slopRating: IntNullableFilter
  posts: PostManyRelationFilter
  movies: MovieManyRelationFilter
  wishlist: MovieManyRelationFilter
  watched: MovieManyRelationFilter
  preferences: UserPreferenceManyRelationFilter
  createdAt: DateTimeNullableFilter
  lastLoginDate: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input MovieManyRelationFilter {
  every: MovieWhereInput
  some: MovieWhereInput
  none: MovieWhereInput
}

input UserPreferenceManyRelationFilter {
  every: UserPreferenceWhereInput
  some: UserPreferenceWhereInput
  none: UserPreferenceWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  status: OrderDirection
  isPrivileged: OrderDirection
  slopRating: OrderDirection
  createdAt: OrderDirection
  lastLoginDate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: UserRoleType
  status: String
  isPrivileged: Boolean
  slopRating: Int
  posts: PostRelateToManyForUpdateInput
  movies: MovieRelateToManyForUpdateInput
  wishlist: MovieRelateToManyForUpdateInput
  watched: MovieRelateToManyForUpdateInput
  preferences: UserPreferenceRelateToManyForUpdateInput
  createdAt: DateTime
  lastLoginDate: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input MovieRelateToManyForUpdateInput {
  disconnect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  create: [MovieCreateInput!]
  connect: [MovieWhereUniqueInput!]
}

input UserPreferenceRelateToManyForUpdateInput {
  disconnect: [UserPreferenceWhereUniqueInput!]
  set: [UserPreferenceWhereUniqueInput!]
  create: [UserPreferenceCreateInput!]
  connect: [UserPreferenceWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: UserRoleType
  status: String
  isPrivileged: Boolean
  slopRating: Int
  posts: PostRelateToManyForCreateInput
  movies: MovieRelateToManyForCreateInput
  wishlist: MovieRelateToManyForCreateInput
  watched: MovieRelateToManyForCreateInput
  preferences: UserPreferenceRelateToManyForCreateInput
  createdAt: DateTime
  lastLoginDate: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input MovieRelateToManyForCreateInput {
  create: [MovieCreateInput!]
  connect: [MovieWhereUniqueInput!]
}

input UserPreferenceRelateToManyForCreateInput {
  create: [UserPreferenceCreateInput!]
  connect: [UserPreferenceWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  photo: ImageFieldOutput
  assignedTo: User
  status: String
  keywords(where: KeywordWhereInput! = {}, orderBy: [KeywordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: KeywordWhereUniqueInput): [Keyword!]
  keywordsCount(where: KeywordWhereInput! = {}): Int
  slops(where: MovieWhereInput! = {}, orderBy: [MovieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MovieWhereUniqueInput): [Movie!]
  slopsCount(where: MovieWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  assignedTo: UserWhereInput
  status: StringNullableFilter
  keywords: KeywordManyRelationFilter
  slops: MovieManyRelationFilter
}

input KeywordManyRelationFilter {
  every: KeywordWhereInput
  some: KeywordWhereInput
  none: KeywordWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  photo: ImageFieldInput
  assignedTo: UserRelateToOneForUpdateInput
  status: String
  keywords: KeywordRelateToManyForUpdateInput
  slops: MovieRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input KeywordRelateToManyForUpdateInput {
  disconnect: [KeywordWhereUniqueInput!]
  set: [KeywordWhereUniqueInput!]
  create: [KeywordCreateInput!]
  connect: [KeywordWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  photo: ImageFieldInput
  assignedTo: UserRelateToOneForCreateInput
  status: String
  keywords: KeywordRelateToManyForCreateInput
  slops: MovieRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input KeywordRelateToManyForCreateInput {
  create: [KeywordCreateInput!]
  connect: [KeywordWhereUniqueInput!]
}

type Keyword {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  movies(where: MovieWhereInput! = {}, orderBy: [MovieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MovieWhereUniqueInput): [Movie!]
  moviesCount(where: MovieWhereInput! = {}): Int
}

input KeywordWhereUniqueInput {
  id: ID
}

input KeywordWhereInput {
  AND: [KeywordWhereInput!]
  OR: [KeywordWhereInput!]
  NOT: [KeywordWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
  movies: MovieManyRelationFilter
}

input KeywordOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input KeywordUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
  movies: MovieRelateToManyForUpdateInput
}

input KeywordUpdateArgs {
  where: KeywordWhereUniqueInput!
  data: KeywordUpdateInput!
}

input KeywordCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
  movies: MovieRelateToManyForCreateInput
}

type Movie {
  id: ID!
  assignedTo: User
  title: String
  sortTitle: String
  tomatoScore: Int
  runtime: Int
  releaseYear: Int
  handicap: Int
  description: String
  decade: Int
  photo: ImageFieldOutput
  posts: Post
  keywords(where: KeywordWhereInput! = {}, orderBy: [KeywordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: KeywordWhereUniqueInput): [Keyword!]
  keywordsCount(where: KeywordWhereInput! = {}): Int
  howToWatch: String
  movieTitle(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  movieTitleCount(where: UserWhereInput! = {}): Int
  movieWatched(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  movieWatchedCount(where: UserWhereInput! = {}): Int
}

input MovieWhereUniqueInput {
  id: ID
  tomatoScore: Int
}

input MovieWhereInput {
  AND: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  NOT: [MovieWhereInput!]
  id: IDFilter
  assignedTo: UserWhereInput
  title: StringFilter
  sortTitle: StringFilter
  tomatoScore: IntFilter
  runtime: IntNullableFilter
  releaseYear: IntNullableFilter
  handicap: IntNullableFilter
  description: StringFilter
  decade: IntNullableFilter
  posts: PostWhereInput
  keywords: KeywordManyRelationFilter
  howToWatch: StringFilter
  movieTitle: UserManyRelationFilter
  movieWatched: UserManyRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input MovieOrderByInput {
  id: OrderDirection
  title: OrderDirection
  sortTitle: OrderDirection
  tomatoScore: OrderDirection
  runtime: OrderDirection
  releaseYear: OrderDirection
  handicap: OrderDirection
  description: OrderDirection
  decade: OrderDirection
  howToWatch: OrderDirection
}

input MovieUpdateInput {
  assignedTo: UserRelateToOneForUpdateInput
  title: String
  sortTitle: String
  tomatoScore: Int
  runtime: Int
  releaseYear: Int
  handicap: Int
  description: String
  decade: Int
  photo: ImageFieldInput
  posts: PostRelateToOneForUpdateInput
  keywords: KeywordRelateToManyForUpdateInput
  howToWatch: String
  movieTitle: UserRelateToManyForUpdateInput
  movieWatched: UserRelateToManyForUpdateInput
}

input PostRelateToOneForUpdateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input MovieUpdateArgs {
  where: MovieWhereUniqueInput!
  data: MovieUpdateInput!
}

input MovieCreateInput {
  assignedTo: UserRelateToOneForCreateInput
  title: String
  sortTitle: String
  tomatoScore: Int
  runtime: Int
  releaseYear: Int
  handicap: Int
  description: String
  decade: Int
  photo: ImageFieldInput
  posts: PostRelateToOneForCreateInput
  keywords: KeywordRelateToManyForCreateInput
  howToWatch: String
  movieTitle: UserRelateToManyForCreateInput
  movieWatched: UserRelateToManyForCreateInput
}

input PostRelateToOneForCreateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Preference {
  id: ID!
  category: Int
  name: String
}

input PreferenceWhereUniqueInput {
  id: ID
}

input PreferenceWhereInput {
  AND: [PreferenceWhereInput!]
  OR: [PreferenceWhereInput!]
  NOT: [PreferenceWhereInput!]
  id: IDFilter
  category: IntNullableFilter
  name: StringFilter
}

input PreferenceOrderByInput {
  id: OrderDirection
  category: OrderDirection
  name: OrderDirection
}

input PreferenceUpdateInput {
  category: Int
  name: String
}

input PreferenceUpdateArgs {
  where: PreferenceWhereUniqueInput!
  data: PreferenceUpdateInput!
}

input PreferenceCreateInput {
  category: Int
  name: String
}

type UserPreference {
  id: ID!
  user: User
  preference: Preference
}

input UserPreferenceWhereUniqueInput {
  id: ID
}

input UserPreferenceWhereInput {
  AND: [UserPreferenceWhereInput!]
  OR: [UserPreferenceWhereInput!]
  NOT: [UserPreferenceWhereInput!]
  id: IDFilter
  user: UserWhereInput
  preference: PreferenceWhereInput
}

input UserPreferenceOrderByInput {
  id: OrderDirection
}

input UserPreferenceUpdateInput {
  user: UserRelateToOneForUpdateInput
  preference: PreferenceRelateToOneForUpdateInput
}

input PreferenceRelateToOneForUpdateInput {
  create: PreferenceCreateInput
  connect: PreferenceWhereUniqueInput
  disconnect: Boolean
}

input UserPreferenceUpdateArgs {
  where: UserPreferenceWhereUniqueInput!
  data: UserPreferenceUpdateInput!
}

input UserPreferenceCreateInput {
  user: UserRelateToOneForCreateInput
  preference: PreferenceRelateToOneForCreateInput
}

input PreferenceRelateToOneForCreateInput {
  create: PreferenceCreateInput
  connect: PreferenceWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createKeyword(data: KeywordCreateInput!): Keyword
  createKeywords(data: [KeywordCreateInput!]!): [Keyword]
  updateKeyword(where: KeywordWhereUniqueInput!, data: KeywordUpdateInput!): Keyword
  updateKeywords(data: [KeywordUpdateArgs!]!): [Keyword]
  deleteKeyword(where: KeywordWhereUniqueInput!): Keyword
  deleteKeywords(where: [KeywordWhereUniqueInput!]!): [Keyword]
  createMovie(data: MovieCreateInput!): Movie
  createMovies(data: [MovieCreateInput!]!): [Movie]
  updateMovie(where: MovieWhereUniqueInput!, data: MovieUpdateInput!): Movie
  updateMovies(data: [MovieUpdateArgs!]!): [Movie]
  deleteMovie(where: MovieWhereUniqueInput!): Movie
  deleteMovies(where: [MovieWhereUniqueInput!]!): [Movie]
  createPreference(data: PreferenceCreateInput!): Preference
  createPreferences(data: [PreferenceCreateInput!]!): [Preference]
  updatePreference(where: PreferenceWhereUniqueInput!, data: PreferenceUpdateInput!): Preference
  updatePreferences(data: [PreferenceUpdateArgs!]!): [Preference]
  deletePreference(where: PreferenceWhereUniqueInput!): Preference
  deletePreferences(where: [PreferenceWhereUniqueInput!]!): [Preference]
  createUserPreference(data: UserPreferenceCreateInput!): UserPreference
  createUserPreferences(data: [UserPreferenceCreateInput!]!): [UserPreference]
  updateUserPreference(where: UserPreferenceWhereUniqueInput!, data: UserPreferenceUpdateInput!): UserPreference
  updateUserPreferences(data: [UserPreferenceUpdateArgs!]!): [UserPreference]
  deleteUserPreference(where: UserPreferenceWhereUniqueInput!): UserPreference
  deleteUserPreferences(where: [UserPreferenceWhereUniqueInput!]!): [UserPreference]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  keywords(where: KeywordWhereInput! = {}, orderBy: [KeywordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: KeywordWhereUniqueInput): [Keyword!]
  keyword(where: KeywordWhereUniqueInput!): Keyword
  keywordsCount(where: KeywordWhereInput! = {}): Int
  movies(where: MovieWhereInput! = {}, orderBy: [MovieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MovieWhereUniqueInput): [Movie!]
  movie(where: MovieWhereUniqueInput!): Movie
  moviesCount(where: MovieWhereInput! = {}): Int
  preferences(where: PreferenceWhereInput! = {}, orderBy: [PreferenceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PreferenceWhereUniqueInput): [Preference!]
  preference(where: PreferenceWhereUniqueInput!): Preference
  preferencesCount(where: PreferenceWhereInput! = {}): Int
  userPreferences(where: UserPreferenceWhereInput! = {}, orderBy: [UserPreferenceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserPreferenceWhereUniqueInput): [UserPreference!]
  userPreference(where: UserPreferenceWhereUniqueInput!): UserPreference
  userPreferencesCount(where: UserPreferenceWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
