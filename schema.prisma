// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource mysql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "mysql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String           @id @default(uuid())
  name          String           @unique @default("")
  email         String           @unique @default("")
  password      String
  role          UserRoleType     @default(user)
  status        String?          @default("active")
  isPrivileged  Boolean          @default(false)
  slopRating    Int?             @default(0) @map("my_integer")
  posts         Post[]           @relation("Post_assignedTo")
  movies        Movie[]          @relation("Movie_assignedTo")
  wishlist      Movie[]          @relation("Movie_movieTitle")
  watched       Movie[]          @relation("Movie_movieWatched")
  preferences   UserPreference[] @relation("UserPreference_user")
  createdAt     DateTime?        @default(now())
  lastLoginDate DateTime?        @default(now())
}

model Post {
  id              String    @id @default(uuid())
  title           String    @default("")
  content         Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  photo_filesize  Int?
  photo_extension String?
  photo_width     Int?
  photo_height    Int?
  photo_id        String?
  assignedTo      User?     @relation("Post_assignedTo", fields: [assignedToId], references: [id])
  assignedToId    String?   @map("assignedTo")
  status          String?
  keywords        Keyword[] @relation("Keyword_posts")
  slops           Movie[]   @relation("Movie_posts")

  @@index([assignedToId])
}

model Keyword {
  id     String  @id @default(uuid())
  name   String  @default("")
  posts  Post[]  @relation("Keyword_posts")
  movies Movie[] @relation("Keyword_movies")
}

model Movie {
  id              String    @id @default(uuid())
  assignedTo      User?     @relation("Movie_assignedTo", fields: [assignedToId], references: [id])
  assignedToId    String?   @map("assignedTo")
  title           String    @default("")
  sortTitle       String    @default("")
  tomatoScore     Int       @unique @default(0) @map("my_tomatoScore")
  runtime         Int?      @default(0) @map("my_runtime")
  releaseYear     Int?      @default(0) @map("my_releaseYear")
  handicap        Int?      @default(0) @map("my_handicap")
  description     String    @default("")
  decade          Int?      @default(0) @map("my_decade")
  photo_filesize  Int?
  photo_extension String?
  photo_width     Int?
  photo_height    Int?
  photo_id        String?
  posts           Post?     @relation("Movie_posts", fields: [postsId], references: [id])
  postsId         String?   @map("posts")
  keywords        Keyword[] @relation("Keyword_movies")
  howToWatch      String    @default("")
  movieTitle      User[]    @relation("Movie_movieTitle")
  movieWatched    User[]    @relation("Movie_movieWatched")

  @@index([assignedToId])
  @@index([postsId])
}

model Preference {
  id                             String           @id @default(uuid())
  category                       Int?
  name                           String           @default("")
  from_UserPreference_preference UserPreference[] @relation("UserPreference_preference")
}

model UserPreference {
  id           String      @id @default(uuid())
  user         User?       @relation("UserPreference_user", fields: [userId], references: [id])
  userId       String?     @map("user")
  preference   Preference? @relation("UserPreference_preference", fields: [preferenceId], references: [id])
  preferenceId String?     @map("preference")

  @@index([userId])
  @@index([preferenceId])
}

enum UserRoleType {
  admin
  user
}
