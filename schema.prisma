// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource mysql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "mysql"
}

generator client {
  provider = "prisma-client-js"
}

model Fest {
  id        String     @id @default(uuid())
  name      String     @default("")
  startDate DateTime   @mysql.Date
  endDate   DateTime   @mysql.Date
  creator   User?      @relation("Fest_creator", fields: [creatorId], references: [id])
  creatorId String?    @map("creator")
  attendees User[]     @relation("Fest_attendees")
  invitees  User[]     @relation("Fest_invitees")
  movies    Movie[]    @relation("Fest_movies")
  festVotes FestVote[] @relation("FestVote_fest")
  festNotes FestNote[] @relation("FestNote_fest")

  @@index([creatorId])
}

model FestNote {
  id        String    @id @default(uuid())
  content   String    @default("")
  user      User?     @relation("FestNote_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  fest      Fest?     @relation("FestNote_fest", fields: [festId], references: [id])
  festId    String?   @map("fest")
  createdAt DateTime? @default(now())

  @@index([userId])
  @@index([festId])
}

model FestVote {
  id     String  @id @default(uuid())
  user   User?   @relation("FestVote_user", fields: [userId], references: [id])
  userId String? @map("user")
  movie  Movie[] @relation("FestVote_movie")
  fest   Fest?   @relation("FestVote_fest", fields: [festId], references: [id])
  festId String? @map("fest")

  @@index([userId])
  @@index([festId])
}

model Keyword {
  id            String       @id @default(uuid())
  name          String       @unique @default("")
  handicap      Int?         @default(0)
  keywordType   KeywordType? @relation("Keyword_keywordType", fields: [keywordTypeId], references: [id])
  keywordTypeId String?      @map("keywordType")
  posts         Post[]       @relation("Keyword_posts")
  movies        Movie[]      @relation("Keyword_movies")

  @@index([keywordTypeId])
}

model KeywordType {
  id       String    @id @default(uuid())
  name     String    @unique @default("")
  keywords Keyword[] @relation("Keyword_keywordType")
}

model Movie {
  id                  String     @id @default(uuid())
  author              User?      @relation("Movie_author", fields: [authorId], references: [id])
  authorId            String?    @map("author")
  title               String     @default("")
  description         String?    @mysql.Text
  releaseYear         Int?       @default(1970)
  runtime             Int?       @default(0)
  photo_filesize      Int?
  photo_extension     String?
  photo_width         Int?
  photo_height        Int?
  photo_id            String?
  tomatoScore         Int?       @default(0)
  howToWatch          String     @default("")
  handicap            Int?       @default(0)
  posts               Post[]     @relation("Movie_posts")
  sounds              Sound[]    @relation("Movie_sounds")
  keywords            Keyword[]  @relation("Keyword_movies")
  status              String?    @default("draft")
  from_Fest_movies    Fest[]     @relation("Fest_movies")
  from_FestVote_movie FestVote[] @relation("FestVote_movie")
  from_User_wishlist  User[]     @relation("User_wishlist")
  from_User_watched   User[]     @relation("User_watched")

  @@index([authorId])
}

model Post {
  id              String    @id @default(uuid())
  title           String    @default("")
  content         String    @default("")
  photo_filesize  Int?
  photo_extension String?
  photo_width     Int?
  photo_height    Int?
  photo_id        String?
  author          User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId        String?   @map("author")
  createdAt       DateTime? @default(now())
  status          String?
  keywords        Keyword[] @relation("Keyword_posts")
  movies          Movie[]   @relation("Movie_posts")

  @@index([authorId])
}

model Preference {
  id             String             @id @default(uuid())
  category       Int?
  name           String             @default("")
  type           PreferenceTypeType @default(radio)
  userPreference UserPreference[]   @relation("UserPreference_preference")
}

model Sound {
  id              String  @id @default(uuid())
  title           String  @unique @default("")
  photo_filesize  Int?
  photo_extension String?
  photo_width     Int?
  photo_height    Int?
  photo_id        String?
  movies          Movie[] @relation("Movie_sounds")
  audio           String  @default("")
}

model User {
  id            String           @id @default(uuid())
  username      String           @unique @default("")
  email         String           @unique @default("")
  password      String
  status        String?          @default("active")
  isAdmin       Boolean          @default(false)
  posts         Post[]           @relation("Post_author")
  movies        Movie[]          @relation("Movie_author")
  wishlist      Movie[]          @relation("User_wishlist")
  watched       Movie[]          @relation("User_watched")
  preferences   UserPreference[] @relation("UserPreference_user")
  myFests       Fest[]           @relation("Fest_creator")
  festAttendees Fest[]           @relation("Fest_attendees")
  festInvitees  Fest[]           @relation("Fest_invitees")
  festVotes     FestVote[]       @relation("FestVote_user")
  festNotes     FestNote[]       @relation("FestNote_user")
  createdAt     DateTime?        @default(now())
  lastLoginDate DateTime?        @default(now())
}

model UserPreference {
  id           String      @id @default(uuid())
  user         User?       @relation("UserPreference_user", fields: [userId], references: [id])
  userId       String?     @map("user")
  preference   Preference? @relation("UserPreference_preference", fields: [preferenceId], references: [id])
  preferenceId String?     @map("preference")
  value        Int

  @@index([userId])
  @@index([preferenceId])
}

enum PreferenceTypeType {
  radio
  integer
}
